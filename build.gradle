buildscript {
	repositories {
		mavenCentral()
	}

	dependencies {
		classpath 'org.ajoberstar:gradle-git:0.10.0'
	}
}

apply plugin: 'org.ajoberstar.grgit-release'
import org.ajoberstar.grgit.*
release {
	grgit = Grgit.open(project.file('.'))
	releaseTasks = ['framework:signArchives','framework:uploadArchives',
		'codegen:signArchives','codegen:uploadArchives',
		'extras:signArchives','extras:uploadArchives']
	version.toString()
}


subprojects {
	apply plugin: 'java'
	
	group = 'org.robobinding'
	//version = $version
	compileJava {
		sourceCompatibility = JavaVersion.VERSION_1_6
		targetCompatibility = JavaVersion.VERSION_1_6
	}
	
	ext {
		guavaVersion = '18.0'
		robolectricAndroidVersion = '4.4_r1-robolectric-1'
		aspectjVersion = '1.8.9'
		jcodemodelVersion = '2.7.11'

		commonsLangVersion = '3.4'
		
		robolectricVersion = '3.0'
		junitVersion = '4.12'
		hamcrestVersion = '1.3'	
		mockitoVersion = '1.10.19'
		commonsCollectionsVersion = '3.2.1'
	}
	
	dependencies {
		testCompile "org.hamcrest:hamcrest-library:$hamcrestVersion"
		testCompile ("junit:junit:$junitVersion") {
			exclude group: 'org.hamcrest', module: 'hamcrest-core'
		}
		testCompile 'org.jmock:jmock-legacy:2.8.1'
		testCompile("org.mockito:mockito-core:$mockitoVersion") {
			exclude group: 'org.hamcrest', module: 'hamcrest-core'
		}
		testCompile "org.apache.commons:commons-lang3:$commonsLangVersion"
		testCompile "commons-collections:commons-collections:$commonsCollectionsVersion"
	}
}

String getRepositoryUsername() {
	return project.hasProperty('repositoryUserName')?project.property('repositoryUserName'):'noUserName';
}

String getRepositoryPassword() {
	return project.hasProperty('repositoryPassword')?project.property('repositoryPassword'):'noPassword';
}

task wrapper(type: Wrapper) {
	gradleVersion = '3.1'
	description = 'Produces Gradle Wrapper for the project.'
	group = 'other'
}
